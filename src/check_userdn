#! /usr/bin/perl -w
#
# Probe for EGI user DN publishing
# Copyright (c) 2012 Emir Imamagic
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#
# Changes and Modifications
# =========================
# 22-Mar-2013 - Created;

use strict;
use Monitoring::Plugin;
use LWP::UserAgent;
use Date::Parse;

# Standard variables used in Monitoring::Plugin constructor
use constant PROGNAME => 'check_userdn';
use constant VERSION => '1.0';
use constant DESCRIPTION => 'Probe for EGI user DN publishing.';
use constant EXTRA_DESC => '';
use constant LICENSE => 'This nagios plugin is free software, and comes with ABSOLUTELY NO WARRANTY.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
   http://www.apache.org/licenses/LICENSE-2.0
Copyright 2012 Emir Imamagic';
use constant SHORTNAME => 'check_userdn';
use constant USAGE => "usage: check_userdn --site <file> \n";

use constant USERDN_URL => 'http://accounting.egi.eu/userdn_publication.php';

# Create Monitoring::Plugin instance
my $plugin = Monitoring::Plugin->new (usage => USAGE,
                                  shortname => SHORTNAME,
                                  version => VERSION,
                                  blurb => DESCRIPTION,
                                  extra => EXTRA_DESC,
                                  license => LICENSE,
                                  plugin  => PROGNAME);

# Define additional arguments
$plugin->add_arg(
    spec => 'url|u=s',
    help => "u|url\n   URL of PI providing user DN data.\n   (default: ".USERDN_URL.")",
    required => 0,
    default => USERDN_URL
);
$plugin->add_arg(
    spec => 'site|s=s',
    help => "s|site\n   Nae of the site for which data is gatheres.\n   (default: )",
    required => 1
);

$plugin->getopts;

# Signal handler - TERM
local $SIG{ALRM} = sub {
    local $SIG{TERM} = 'IGNORE';
    kill TERM => -$$;
    $plugin->nagios_die("Timeout occured.");
};

local $SIG{TERM} = sub {
    local $SIG{TERM} = 'IGNORE';
    kill TERM => -$$;
    $plugin->nagios_die("Plugin received TERM signal.");
};

# Input params validation

my $site = $plugin->opts->site;
my $url = $plugin->opts->url . '?ExecutingSite=' . $site;
alarm($plugin->opts->timeout);

my $ua = LWP::UserAgent->new(env_proxy=>1);
my $req = HTTP::Request->new(GET => $url);
my $res = $ua->request($req);
if (!$res->is_success) {
    $plugin->nagios_die("Could not get content of userdn web page '".$url."': ".$res->status_line);
}

alarm(0);

my $output = $res->content;
my $state;
my $answer;

if ($output =~ /OK/) {
    $state = OK;
    $answer = "Site $site is publishing user DN data.";
} elsif ($output =~ /WARN/) {
    $state = WARNING;
    if ($output =~ /Site not found/) {
        $answer = "Site $site not found in accounting portal.";
    } else {
        $answer = "UserDN web PI returned WARN for site $site: $output";
    }
} elsif ($output =~ /CRITICAL/) {
    $state = CRITICAL;
    $answer = "Site $site is not publishing user DN data.";
} else {
    $state = UNKNOWN;
    $answer = "Unknown response from UserDN web PI.";
}

$answer .= "\nUserDN web PI URL: $url\nResponse: $output.";

$plugin->nagios_exit($state, $answer);

